pipeline {
    agent any

    parameters {
        choice(name: 'ENVIRONMENT', choices: ['staging', 'prod'], description: 'Select the deployment environment')
    }

    environment {
        REMOTE_STAGE_SERVER = '192.168.5.222'
        DEPLOY_ZIP = "php-app-${BUILD_NUMBER}.zip"
        STAGING_DIR = '/var/www/html'
        PROD_DIR = '/var/www/html'
        DEPLOY_STATUS = 'NOT_STARTED'
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/madhulmksemt/php_site.git'
            }
        }

        stage('Verify Files') {
            steps {
                sh ''' 
                    env
                    ls -la
                    '''
            }
        }

        stage('Archive PHP Code') {
            steps {
                sh '''
                zip -r "$DEPLOY_ZIP" . -x "*.git*" "*.zip*" "*/.git/*" "workspace/*"
                '''
            }
        }

        stage('Archive Artifact') {
            steps {
                archiveArtifacts artifacts: "${DEPLOY_ZIP}", fingerprint: true
                echo "Packaged artifact: ${DEPLOY_ZIP}"
            }
        }

        stage('Deploy to Environment') {
            steps {
                script {
                    if (params.ENVIRONMENT == 'staging') {
                        sh """
                        scp -o StrictHostKeyChecking=no ${DEPLOY_ZIP} genericaccount@${REMOTE_STAGE_SERVER}:${STAGING_DIR}
                        ssh -o StrictHostKeyChecking=no genericaccount@${REMOTE_STAGE_SERVER} "unzip -o ${STAGING_DIR}/${DEPLOY_ZIP} -d ${STAGING_DIR} && rm -f ${STAGING_DIR}/${DEPLOY_ZIP}"
                        """
                        env.DEPLOY_STATUS = 'SUCCESS'
                    } else if (params.ENVIRONMENT == 'prod') {
                        sh """
                        scp -o StrictHostKeyChecking=no ${DEPLOY_ZIP} genericaccount@${REMOTE_STAGE_SERVER}:${PROD_DIR}
                        ssh -o StrictHostKeyChecking=no genericaccount@${REMOTE_STAGE_SERVER} "unzip -o ${PROD_DIR}/${DEPLOY_ZIP} -d ${PROD_DIR} && rm -f ${PROD_DIR}/${DEPLOY_ZIP}"
                        """
                        env.DEPLOY_STATUS = 'SUCCESS'
                    } else {
                        error "Invalid environment selected: ${params.ENVIRONMENT}"
                    }
                }
            }
        }

        stage( 'Clean Workspace') {
            steps {
                cleanWs()
            }
        }
    }

    post {
        success {
            script {
                if (env.DEPLOY_STATUS == 'SUCCESS') {
                    echo "Deployment to ${params.ENVIRONMENT} was successful"
                }
            }
        }
        failure {
            script {
                echo "Deployment to ${params.ENVIRONMENT} failed!"

            }    
        }
    }
}
